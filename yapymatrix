#!/usr/bin/env python3
"""
YAPYMatrix - Yet Another Python Matrix - A Matrix Code Emulator
Made with love for the greatest sci-fi movie ever made

A special thanks to Indian Pythonista (https://www.youtube.com/channel/UCkUq-s6z57uJFUFBvZIVTyg)
Check out his videos on working with the curses module

Also thanks to reddit users for suggestions:
starcrATI

More like this: https://www.reddit.com/r/matrix
"""

import argparse
import curses
from time import sleep
import signal
import sys
import random

app = {
    "name":    "YAPYMatrix",
    "desc":    "Highly customizable Matrix Code Emulator written in python",
    "version": "0.3.0",
    "updated": "2019-08-16",
    "author":  "elundmark@posteo.se",
    "source":  "https://github.com/elundmark/yapymatrix",
    "license": "MIT; https://www.opensource.org/licenses/MIT",
}

argparser = argparse.ArgumentParser(
    prog=app["name"],
    description=app["name"] + " " + app["version"] + " (" + app["updated"] + ") " +
    app["desc"] + " [" + app["source"] + "]",
    allow_abbrev=False
)
argparser.add_argument("-V", "--version", action="version", version="%(prog)s " + app["version"])
argparser.add_argument(
    "-f", "--fps", type=float, default=21,
    help="Frames per second, or delay between updates to be precise. " +
    "This will be converted to 1 / fps and used as seconds to sleep " +
    "between updates. If this is over 60, sleep will be omitted (Default: %(default)s)"
)
argparser.add_argument(
    "-b", "--force-black", action="store_true",
    help="Color all backgrounds black. Normally your terminals default color-scheme will be used " +
    "(Default: %(default)s)"
)
argparser.add_argument(
    "-C", "--no-colors", action="store_true",
    help="Do not use any colors. This will speed up things quite a bit, so think of using this " +
    "if you are using something like cool-retro-term (Default: %(default)s)"
)
argparser.add_argument(
    "-B", "--no-bold-characters", action="store_true",
    help="Do not use any bold characters (Default: %(default)s)"
)
argparser.add_argument(
    "-l", "--sparse-columns", action="store_true",
    help="This will skip every other column, to make it look a little lighter. " +
    "Works best on wide terminals. Plus it speeds up things a bit (Default: %(default)s)"
)
argparser.add_argument(
    "-L", "--very-sparse-columns", action="store_true",
    help="This will skip 2 of 3 column, to make it look a lot lighter. " +
    "Works best on wide terminals. Plus it speeds up things a lot (Default: %(default)s)"
)
argparser.add_argument(
    "-t", "--tv-intro", action="store_true",
    help="This skips a step when the program starts, and it will " +
    "look more like an old crt television warming up. This started out a a bug, " +
    "but now I kinda like it, so I made it an optional extra (Default: %(default)s)"
)
argparser.add_argument(
    "--include-spaces", type=int, default=3,
    help="The original matrix code has spaces included in the strings, which I don't " +
    "think I've seen in any other versions. Experimenting with this value will increase " +
    "the amount it will 'sparkle', or set it to 0 to disable spaces entirely " +
    "(Default: %(default)s)"
)
argparser.add_argument(
    "--onscreen-letters-timer", type=int, default=4,
    help="This might be the most important part imo; how long should the characters 'stick' " +
    "in one place? The number represents the maximum amount of times it shows before it is " +
    "replaced. Randomness is also added to make it look organic (Default: %(default)s)"
)
argparser.add_argument(
    "--random-bold", type=int, default=8,
    help="Make characters bold by a random chanse of 1 in N. Making this 0 will not turn off " +
    "bold characters completely, to do this, use --no-bold-characters instead " +
    "(Default: %(default)s)"
)
argparser.add_argument(
    "--spaces-abs-min-height", type=int, default=5,
    help="Minimum height of vertical spaces (Default: %(default)s)"
)
argparser.add_argument(
    "--spaces-abs-max-height", type=int, default=35,
    help="Maximum height of vertical spaces (Default: %(default)s)"
)
argparser.add_argument(
    "--spaces-rel-max-height", type=float, default=0.8,
    help="Maximum height of vertical spaces, relative to the terminals height " +
    "(--spaces-abs-max-height will override this value if it is lower) " +
    "(Default: %(default)s)"
)
argparser.add_argument(
    "--strings-abs-max-height", type=int, default=25,
    help="Maximum height of vertical strings (Default: %(default)s)"
)
argparser.add_argument(
    "--strings-abs-min-height", type=int, default=5,
    help="Minimum height of vertical strings. Cannot be lower than 5 " +
    "(Default: %(default)s)"
)
argparser.add_argument(
    "--strings-rel-max-height", type=float, default=0.6,
    help="Maximum height of vertical strings, relative to the terminals height " +
    "(--strings-abs-max-height will override this value if it is lower) " +
    "(Default: %(default)s)"
)
# Note: Even at just 2 the cache recycle is very hard to dissern
argparser.add_argument(
    "--vertical-cache", type=int, default=7,
    help="Advanced: Vertical cache. The bigger you set this to, the more time passes " +
    "before anything repeats, but it requires more ram and will require more time " +
    "to calculate on startup. You should probably leave this value alone (Default: %(default)s)"
)
opts = argparser.parse_args()
fps = 1 / opts.fps if opts.fps > 0 and opts.fps <= 60 else 0

# set terminal title
# shows the programs name in the terminals titlebar
app["py_dot_version"] = float(sys.version.split()[0][:3])
if app["py_dot_version"] >= 3.3:
    # newer versions
    print('\33]0;' + app["name"] + '\a', end='', flush=True)
else:
    # older - 3.0+ is of course assumed since this is written in python3
    print('\33]0;' + app["name"] + '\a', end='')
    sys.stdout.flush()

def main(term):
    """main function - this is ment to be passed into curses.wrapper"""
    # hide cursor
    curses.curs_set(0)
    # leave cursor where it is on update
    term.leaveok(1)
    # clear (any) previous paints
    # so we can call main(term) when user resizes the terminal
    term.clear()
    # Use default colors and not black bkg and white fg
    curses.use_default_colors()
    # get the properties of the term
    (height, width) = term.getmaxyx()
    # Useful for debugging values
    debug = list()

    # Setup colors
    use_colors = False
    if not opts.no_colors and curses.has_colors():
        # user want color and the terminal seems to have them
        use_colors = True

    if use_colors:
        if opts.force_black:
            # Black bkg
            curses.init_pair(1, curses.COLOR_GREEN, curses.COLOR_BLACK)
            curses.init_pair(2, curses.COLOR_WHITE, curses.COLOR_BLACK)
        else:
            # Transparent bkg
            curses.init_pair(1, curses.COLOR_GREEN, -1)
            curses.init_pair(2, curses.COLOR_WHITE, -1)
        clr_1 = curses.color_pair(1)
        clr_2 = curses.color_pair(2)
        if opts.force_black:
            # Set window bkg-color
            curses.init_pair(3, curses.COLOR_WHITE, curses.COLOR_BLACK)
            term.bkgd(curses.color_pair(3))


    def signal_handler(sig, frame=None, msg=None):
        """do this instead of traceback on ctrl+c"""
        term.clear()
        # reset to defaults
        curses.echo()
        curses.nocbreak()
        term.keypad(False)
        # close curses window
        curses.endwin()
        # log to terminal?
        if msg is not None:
            import pprint
            pp = pprint.PrettyPrinter(indent=4)
            pp.pprint([app, sig, msg])
        elif debug:
            import pprint
            pp = pprint.PrettyPrinter(indent=4)
            pp.pprint([app, sig, debug])
        # We assume nothing went wrong and exit with '0'
        sys.exit(0)

    # trap exit signals and exit gracefully using the signal_handler fn
    signal.signal(signal.SIGHUP, signal_handler)
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    signal.signal(signal.SIGQUIT, signal_handler)

    # Exit if the terminal is too small
    if height < 8 or width < 8:
        term.addstr("Too small")
        term.refresh()
        sleep(3)
        signal_handler(2, None, "The terminal is too small - A minimum of 8x8 is required")
        return False

    def char_range(c1, c2):
        """Generates the characters from `c1` to `c2`, inclusive."""
        for c in range(ord(c1), ord(c2)+1):
            yield chr(c)

    chars = list()

    # Generate unicode characters for use with the 'Matrix Code NFI' Font
    for c in char_range("!", "?"):
        chars.append(c)
    for c in char_range("[", "_"):
        chars.append(c)
    for c in char_range("{", "~"):
        chars.append(c)
    for c in char_range("A", "z"):
        chars.append(c)

    for i in range(0, len(chars) - 1):
        # this char is in the range but is not in the font
        if chars[i] == "`":
            chars[i] = "p"
    if isinstance(opts.include_spaces, int):
        # how many spaces to include in the characters strings
        opts.include_spaces = max(0, opts.include_spaces)
        for i in range(0, opts.include_spaces):
            chars.append(" ")

    def get_rand_chars(size):
        """Generate a random copy of chars"""
        l = list()
        while len(l) < size:
            l += chars[:]
        # better shuffle the entire thing afterwards
        # rather than using l += random.sample(chars, len(chars))
        random.shuffle(l)
        return l

    # Pre-calculating random stuff will save tons of cpu time
    # rand_chars was previously set way too high,
    # this is a now fixed size of w*h*2
    rand_chars = get_rand_chars(width * height * 2)
    rand_chars_len = len(rand_chars)
    rand_char_i = rand_chars_len - 1
    max_prev_i = opts.onscreen_letters_timer
    rand_prev_ints = [ random.randint(0, max_prev_i + 1) for tmp in range(0, height) ]
    rand_prev_len = len(rand_prev_ints)
    rand_prev_i = 0

    def gen_rand_string_column(h):
        """Generate a column of letters"""
        # This value must always be a minimum of 5
        min_height = max(5, opts.strings_abs_min_height)
        if opts.strings_rel_max_height > 0:
            max_height = min(
                # highest value is the smallest of these two
                opts.strings_abs_max_height,
                int(h * opts.strings_rel_max_height),
            )
        else:
            max_height = opts.strings_abs_max_height
        if max_height < min_height:
            # max cannot be lower than min
            max_height = min_height
        n = random.randint(min_height, max_height)
        l = list()
        bold_int = curses.A_BOLD if not opts.no_bold_characters else 0
        for i in range(0, n):
            if i == n - 1:
                # last letter, dimmed
                t = (2, (clr_1 | curses.A_DIM) if use_colors else None)
            elif i == n - 2:
                # next-to-last letter, dimmed and bold
                t = (2, (clr_1 | curses.A_DIM | bold_int) if use_colors else None)
            elif i == 0:
                # tracer - last letter
                t = (0, (clr_2 | bold_int) if use_colors else None)
            elif i == 1:
                # second letter is always bold
                t = (0, (clr_1 | bold_int) if use_colors else None)
            else:
                # random bold - but never for the last char
                if random.randint(0, opts.random_bold) == 0 and i != n - 1:
                    t = (1, (clr_1 | bold_int) if use_colors else None)
                else:
                    t = (1, clr_1 if use_colors else None)
            l.append( t )
        return l

    def gen_rand_spaces_column(h):
        """Generate a column of spaces"""
        min_height = opts.spaces_abs_min_height
        if opts.spaces_rel_max_height > 0:
            max_height = min(
                # highest value is the smallest of these two
                opts.spaces_abs_max_height,
                int(h * opts.spaces_rel_max_height),
            )
        else:
            max_height = opts.spaces_abs_max_height
        if max_height < min_height:
            # max cannot be lower than min
            max_height = min_height
        n = random.randint(min_height, max_height)
        l = [ (-1, None) for i in range(0, n) ]
        return l

    # We pre-calculate the entire matrix layout here, all except the letters
    matrix = [ [] for tmp in range(0, width) ]

    for x in range(0, width):
        # size of the cache
        while len(matrix[x]) < height * max(1, opts.vertical_cache):
            # generate string objects
            rand_strings = gen_rand_string_column(height)
            # generate space objects
            rand_spaces = gen_rand_spaces_column(height)
            if opts.sparse_columns:
                # skip every other column
                if x % 2 == 0:
                    if opts.tv_intro:
                        matrix[x] += rand_strings
                        matrix[x] += rand_spaces
                    else:
                        matrix[x] += rand_spaces
                        matrix[x] += rand_strings
                else:
                    matrix[x] += rand_spaces
            elif opts.very_sparse_columns:
                # skip 2of 3 columns
                if x % 3 == 0:
                    if opts.tv_intro:
                        matrix[x] += rand_strings
                        matrix[x] += rand_spaces
                    else:
                        matrix[x] += rand_spaces
                        matrix[x] += rand_strings
                else:
                    matrix[x] += rand_spaces
            else:
                # normal mode, all columns are painted
                if opts.tv_intro:
                    matrix[x] += rand_strings
                    matrix[x] += rand_spaces
                else:
                    matrix[x] += rand_spaces
                    matrix[x] += rand_strings

    # Keep track of matrix indexes, and previous characters inserted
    prev = [ { "pos": 0, "size": len(tmp), "prev": [""]*height } for tmp in matrix ]
    last_x = width - 1
    last_y = height - 1
    # This help the rain fall from the top and not explode on screen
    initial_whitespace_skip = (width * height) - 1

    while True:
        # Dont worry - This is a very cheap cpu process
        check_size = term.getmaxyx()
        if check_size[0] != height or check_size[1] != width:
            # the terminal window has changed size
            return main(term)

        x_pos = 0

        # loop by rows
        while x_pos < width:

            # 1) I never use len() unless I have too, I'm caching everything instead
            get_prev_int = rand_prev_ints[rand_prev_i]
            rand_prev_i += 1
            if rand_prev_i == rand_prev_len:
                rand_prev_i = 0
            y_pos = 0

            # loop by columns
            while y_pos < height:

                # bottom right corner can not be written to
                # will throw an error if we do
                if y_pos == last_y and x_pos == last_x:
                    y_pos += 1
                    continue

                # type of object (type, color)
                cell = matrix[x_pos][prev[x_pos]["pos"] - y_pos]

                if cell[0] >= 0:
                    # string object
                    letter = ""
                    # sticky or not
                    if get_prev_int != max_prev_i and y_pos < last_y:
                        letter = prev[x_pos]["prev"][y_pos]
                        if letter == " ":
                            letter = ""

                    if letter == "":
                        # randomize
                        letter = rand_chars[rand_char_i]
                        rand_char_i -= 1
                        if rand_char_i < 0:
                            rand_char_i = rand_chars_len - 1
                else:
                    # space object
                    letter = " "

                if cell[1] is None or letter == " ":
                    # space, or no styling neede
                    term.addch(y_pos, x_pos, letter)
                else:
                    # character, needs styling
                    term.attron(cell[1])
                    term.addch(y_pos, x_pos, letter)
                    term.attroff(cell[1])

                # dont't save spaces as sticky characters
                if get_prev_int != max_prev_i and letter != " ":
                    prev[x_pos]["prev"][y_pos] = letter
                else:
                    prev[x_pos]["prev"][y_pos] = ""

                # treat the first "screen" differently by breaking after any new rows
                # makes the rain fall from the sky properly
                if initial_whitespace_skip != 0 and (prev[x_pos]["pos"] - y_pos) <= 0:
                    initial_whitespace_skip -= 1
                    break

                # counts down sticky letters
                # See 1)
                get_prev_int += 1
                if get_prev_int == max_prev_i + 1:
                    get_prev_int = 0

                y_pos += 1

            # "Move" to new line in matrix
            # See 1)
            prev[x_pos]["pos"] += 1
            if prev[x_pos]["pos"] == prev[x_pos]["size"]:
                prev[x_pos]["pos"] = 0

            x_pos += 1

        # Now we can paint the entire screen
        term.refresh()
        # delay - skip if over 60 in which case sleep is illogical
        if fps > 0:
            sleep(fps)

# init
curses.wrapper(main)
